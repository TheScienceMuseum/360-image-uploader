service: smgco-360-uploader

provider:
  name: aws
  runtime: nodejs8.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - lambda:InvokeFunction
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:PutObjectTagging
        - s3:PutObjectVersionAcl
        - s3:PutObjectVersionTagging
        - s3:Post
        - s3:DeleteObject
      Resource:
        - "*"
  environment:
    TABLE_NAME: { "Ref": "360ImagesDynamoDBTable" }
    S3_BUCKET: ${opt:bucket}
    REGION: ${opt:region}
  stackTags:
    System: CollectionsOnline

functions:
  listObjects:
    handler: lambda/listObjects/index.handler
    timeout: 90
    events:
      - http:
          path: list-objects
          method: get
          cors: true

  processFile:
    handler: lambda/processFile/index.handler
    timeout: 90
    events:
      - s3:
          bucket: ${opt:bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .ggpkg

  toggleStatus:
    handler: lambda/toggleStatus/index.handler
    timeout: 90
    events:
      - http:
          path: toggle-status
          method: post
          cors: true

  uploadForm:
    handler: lambda/uploadForm/index.handler
    timeout: 90
    events:
      - http:
          path: /
          method: get
          cors: true

  uploadFile:
    handler: lambda/uploadFile/index.handler
    timeout: 90

resources:
  Resources:
    360ImagesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-offline
